import json
import os
import time
from typing import List, Dict, Optional
import google.generativeai as genai
from dotenv import load_dotenv
from bazaar_scout import BazaarScout

load_dotenv()

class GeminiAgentFinder:
    """AI –∞–≥–µ–Ω—Ç —Å Gemini –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ x402 –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–º–ø—Ç—É"""
    
    def __init__(self, min_rating: float = 0.5, refresh_interval_minutes: int = 60):
        self.scout = BazaarScout()
        self.agents_cache = None
        self.cache_timestamp = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
        self.min_rating = min_rating  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –≤—ã–±–æ—Ä–∫—É
        self.refresh_interval = refresh_interval_minutes * 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-pro')
        
    def load_agents(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
        if (self.agents_cache is None or 
            current_time - self.cache_timestamp > self.refresh_interval):
            
            print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ Bazaar... (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.refresh_interval//60} –º–∏–Ω)")
            data = self.scout.get_all_agents()
            if data and 'items' in data:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                self.agents_cache = [
                    agent for agent in data['items']
                    if self._has_description(agent)
                ]
                self.cache_timestamp = current_time
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.agents_cache)} –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
            else:
                self.agents_cache = []
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤")
        else:
            remaining_time = int((self.refresh_interval - (current_time - self.cache_timestamp)) / 60)
            print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∞–≥–µ–Ω—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {remaining_time} –º–∏–Ω)")
            
        return self.agents_cache
    
    def _has_description(self, agent):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É –∞–≥–µ–Ω—Ç–∞"""
        accepts = agent.get('accepts', [])
        if not accepts:
            return False
            
        description = accepts[0].get('description', '').strip()
        return len(description) > 0
    
    def find_agents_by_prompt(self, prompt: str) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–º–ø—Ç—É —Å –ø–æ–º–æ—â—å—é Gemini"""
        agents = self.load_agents()
        if not agents:
            return []
        
        print(f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å Gemini: '{prompt}'")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini
        matching_agents = []
        for i, agent in enumerate(agents):
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ {i+1}/{len(agents)}", end='\r')
            
            rating = self._rate_agent_with_gemini(agent, prompt)
            
            if rating >= self.min_rating:
                agent_info = self._format_agent_info(agent, rating)
                matching_agents.append(agent_info)
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matching_agents)} –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º >= {self.min_rating}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        matching_agents.sort(key=lambda x: x['rating'], reverse=True)
        
        return matching_agents
    
    def _rate_agent_with_gemini(self, agent: Dict, prompt: str) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–º–ø—Ç—É —Å –ø–æ–º–æ—â—å—é Gemini"""
        try:
            accepts = agent.get('accepts', [{}])[0]
            resource = agent.get('resource', '')
            description = accepts.get('description', '')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
            analysis_prompt = f"""
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ—Ç x402 –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{prompt}"

–ê–ì–ï–ù–¢:
- –†–µ—Å—É—Ä—Å: {resource}
- –û–ø–∏—Å–∞–Ω–∏–µ: {description}

–ó–ê–î–ê–ß–ê:
–û—Ü–µ–Ω–∏ –æ—Ç 0.0 –¥–æ 1.0 –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∞–≥–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
- 1.0 = –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ—á–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–¥–∞—á—É
- 0.8-0.9 = –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
- 0.6-0.7 = –•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç, –Ω–æ –µ—Å—Ç—å –Ω—é–∞–Ω—Å—ã  
- 0.4-0.5 = –ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
- 0.1-0.3 = –°–ª–∞–±–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
- 0.0 = –°–æ–≤—Å–µ–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç

–£—á–∏—Ç—ã–≤–∞–π:
- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∞–≥–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
- –¢–∏–ø –∑–∞–¥–∞—á–∏ (–ø–æ–∏—Å–∫, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –∞–Ω–∞–ª–∏–∑, API –∏ —Ç.–¥.)

–û–¢–í–ï–¢: —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ.
"""
            
            response = self.model.generate_content(analysis_prompt)
            rating_text = response.text.strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                rating = float(rating_text)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
                rating = max(0.0, min(1.0, rating))
                return rating
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥: {rating_text}")
                return 0.0
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å Gemini: {e}")
            return 0.0
    
    def _format_agent_info(self, agent: Dict, rating: float) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ"""
        accepts = agent.get('accepts', [{}])[0]
        
        return {
            'resource': agent.get('resource'),
            'description': accepts.get('description'),
            'price_usdc': accepts.get('maxAmountRequired'),
            'network': accepts.get('network'),
            'timeout_seconds': accepts.get('maxTimeoutSeconds'),
            'asset_address': accepts.get('asset'),
            'pay_to_address': accepts.get('payTo'),
            'last_updated': agent.get('lastUpdated'),
            'rating': round(rating, 3)  # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 1
        }
    
    def search_and_display(self, prompt: str, show_details: bool = True):
        """–ò—â–µ—Ç –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        print(f"üîç –ò—â—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è: '{prompt}'")
        print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {self.min_rating}\n")
        
        matching_agents = self.find_agents_by_prompt(prompt)
        
        if not matching_agents:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º >= {self.min_rating}")
            return
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matching_agents)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤:\n")
        
        for i, agent in enumerate(matching_agents[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            # –≠–º–æ–¥–∑–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            if agent['rating'] >= 0.9:
                emoji = "üåü"
            elif agent['rating'] >= 0.7:
                emoji = "üî•"
            elif agent['rating'] >= 0.5:
                emoji = "‚úÖ"
            else:
                emoji = "‚ö†Ô∏è"
            
            print(f"{emoji} #{i} | –†–µ–π—Ç–∏–Ω–≥: {agent['rating']}")
            print(f"üì° –†–µ—Å—É—Ä—Å: {agent['resource']}")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {agent['description']}")
            
            if show_details:
                print(f"üí∞ –¶–µ–Ω–∞: {agent['price_usdc']} USDC")
                print(f"üåç –°–µ—Ç—å: {agent['network']}")
                print(f"‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: {agent['timeout_seconds']}s")
                print(f"üí≥ –ê–¥—Ä–µ—Å –æ–ø–ª–∞—Ç—ã: {agent['pay_to_address']}")
                print(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω: {agent['last_updated']}")
            
            print("-" * 80)
    
    def get_top_agents(self, prompt: str, limit: int = 5) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –∞–≥–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
        matching_agents = self.find_agents_by_prompt(prompt)
        return matching_agents[:limit]
    
    def set_min_rating(self, min_rating: float):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        self.min_rating = max(0.0, min(1.0, min_rating))
        print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.min_rating}")
    

    
    def get_rating_stats(self, prompt: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        agents = self.load_agents()
        if not agents:
            return {}
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –¥–ª—è: '{prompt}'")
        
        ratings = []
        for i, agent in enumerate(agents):
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {i+1}/{len(agents)}", end='\r')
            rating = self._rate_agent_with_gemini(agent, prompt)
            ratings.append(rating)
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:")
        
        stats = {
            'total_agents': len(ratings),
            'avg_rating': round(sum(ratings) / len(ratings), 3),
            'max_rating': round(max(ratings), 3),
            'min_rating': round(min(ratings), 3),
            'above_threshold': len([r for r in ratings if r >= self.min_rating]),
            'rating_distribution': {
                'excellent (0.9-1.0)': len([r for r in ratings if r >= 0.9]),
                'good (0.7-0.9)': len([r for r in ratings if 0.7 <= r < 0.9]),
                'ok (0.5-0.7)': len([r for r in ratings if 0.5 <= r < 0.7]),
                'poor (0.3-0.5)': len([r for r in ratings if 0.3 <= r < 0.5]),
                'bad (0.0-0.3)': len([r for r in ratings if r < 0.3]),
            }
        }
        
        for key, value in stats.items():
            if key != 'rating_distribution':
                print(f"  {key}: {value}")
        
        print(f"  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:")
        for category, count in stats['rating_distribution'].items():
            print(f"    {category}: {count}")
        
        return stats

def main():
    print("ü§ñ Gemini AI Agent Finder –¥–ª—è x402 Bazaar")
    print("=" * 50)
    
    try:
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç)
        refresh_interval = int(os.getenv('AGENTS_REFRESH_INTERVAL_MINUTES', '60'))
        finder = GeminiAgentFinder(min_rating=0.5, refresh_interval_minutes=refresh_interval)
        
        # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞
        test_queries = [
            "–Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
            "—É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ",
            "–ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ Tesla",
            "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π",
        ]
        
        for query in test_queries:
            print(f"\n{'='*60}")
            finder.search_and_display(query, show_details=False)
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print(f"\nüéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {finder.min_rating}):")
        print("–ö–æ–º–∞–Ω–¥—ã: 'stats <–∑–∞–ø—Ä–æ—Å>' - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, 'threshold <—á–∏—Å–ª–æ>' - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥")
        
        while True:
            try:
                user_input = input("\nüí¨ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 'exit'): ").strip()
                
                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if user_input.startswith('stats '):
                    query = user_input[6:]
                    finder.get_rating_stats(query)
                    continue
                
                if user_input.startswith('threshold '):
                    try:
                        new_threshold = float(user_input[10:])
                        finder.set_min_rating(new_threshold)
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
                    continue
                
                if user_input:
                    finder.search_and_display(user_input)
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ GEMINI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

if __name__ == "__main__":
    main()
