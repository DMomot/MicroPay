import json
import re
from typing import List, Dict
from bazaar_scout import BazaarScout

class AIAgentFinder:
    """AI –∞–≥–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö x402 –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–º–ø—Ç—É"""
    
    def __init__(self):
        self.scout = BazaarScout()
        self.agents_cache = None
        
    def load_agents(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤"""
        if self.agents_cache is None:
            print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ Bazaar...")
            data = self.scout.get_all_agents()
            if data and 'items' in data:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                self.agents_cache = [
                    agent for agent in data['items']
                    if self._has_description(agent)
                ]
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.agents_cache)} –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
            else:
                self.agents_cache = []
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤")
        return self.agents_cache
    
    def _has_description(self, agent):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É –∞–≥–µ–Ω—Ç–∞"""
        accepts = agent.get('accepts', [])
        if not accepts:
            return False
            
        description = accepts[0].get('description', '').strip()
        return len(description) > 0
    
    def find_agents_by_prompt(self, prompt: str) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–º–ø—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        agents = self.load_agents()
        if not agents:
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
        keywords = self._extract_keywords(prompt.lower())
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        matching_agents = []
        for agent in agents:
            score = self._calculate_match_score(agent, keywords, prompt.lower())
            if score > 0:
                agent_info = self._format_agent_info(agent, score)
                matching_agents.append(agent_info)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        matching_agents.sort(key=lambda x: x['relevance_score'], reverse=True)
        
        return matching_agents
    
    def _extract_keywords(self, prompt: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞
        stop_words = {'–∏', '–∏–ª–∏', '–Ω–æ', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ', '–∞', 'the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'from', 'up', 'about', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'between', 'among', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should', 'may', 'might', 'must', 'can', 'this', 'that', 'these', 'those'}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞
        words = re.findall(r'\b\w+\b', prompt)
        keywords = [word for word in words if len(word) > 2 and word not in stop_words]
        
        return keywords
    
    def _calculate_match_score(self, agent: Dict, keywords: List[str], prompt: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–º–ø—Ç—É"""
        score = 0.0
        
        accepts = agent.get('accepts', [{}])[0]
        resource = agent.get('resource', '').lower()
        description = accepts.get('description', '').lower()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        for keyword in keywords:
            if keyword in description:
                score += 3.0
            if keyword in resource:
                score += 2.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        semantic_matches = self._check_semantic_matches(prompt, description, resource)
        score += semantic_matches
        
        return score
    
    def _check_semantic_matches(self, prompt: str, description: str, resource: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        score = 0.0
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        categories = {
            'search': ['–ø–æ–∏—Å–∫', '–Ω–∞–π—Ç–∏', 'search', 'find', 'exa', 'google'],
            'weather': ['–ø–æ–≥–æ–¥–∞', 'weather', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'climate'],
            'finance': ['—Ü–µ–Ω—ã', '–∞–∫—Ü–∏–∏', 'stock', 'price', 'trading', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–¥–µ–Ω—å–≥–∏'],
            'ai': ['–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', 'ai', 'generation', 'model', 'gpt', 'llm', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'],
            'code': ['–∫–æ–¥', 'code', 'programming', 'e2b', 'execution', 'run'],
            'image': ['–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'image', 'picture', 'photo', 'visual'],
            'video': ['–≤–∏–¥–µ–æ', 'video', 'remix', 'movie'],
            'memory': ['–ø–∞–º—è—Ç—å', 'memory', 'storage', 'save', 'remember'],
            'data': ['–¥–∞–Ω–Ω—ã–µ', 'data', 'analysis', 'analytics', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
        }
        
        for category, category_keywords in categories.items():
            prompt_matches = sum(1 for word in category_keywords if word in prompt)
            desc_matches = sum(1 for word in category_keywords if word in description)
            resource_matches = sum(1 for word in category_keywords if word in resource)
            
            if prompt_matches > 0 and (desc_matches > 0 or resource_matches > 0):
                score += 2.0 * prompt_matches
        
        return score
    
    def _format_agent_info(self, agent: Dict, score: float) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ"""
        accepts = agent.get('accepts', [{}])[0]
        
        return {
            'resource': agent.get('resource'),
            'description': accepts.get('description'),
            'price_usdc': accepts.get('maxAmountRequired'),
            'network': accepts.get('network'),
            'timeout_seconds': accepts.get('maxTimeoutSeconds'),
            'asset_address': accepts.get('asset'),
            'pay_to_address': accepts.get('payTo'),
            'last_updated': agent.get('lastUpdated'),
            'relevance_score': round(score, 2)
        }
    
    def search_and_display(self, prompt: str):
        """–ò—â–µ—Ç –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        print(f"üîç –ò—â—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è: '{prompt}'\n")
        
        matching_agents = self.find_agents_by_prompt(prompt)
        
        if not matching_agents:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matching_agents)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤:\n")
        
        for i, agent in enumerate(matching_agents[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            print(f"ü§ñ #{i} | –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {agent['relevance_score']}")
            print(f"üì° –†–µ—Å—É—Ä—Å: {agent['resource']}")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {agent['description']}")
            print(f"üí∞ –¶–µ–Ω–∞: {agent['price_usdc']} USDC")
            print(f"üåç –°–µ—Ç—å: {agent['network']}")
            print(f"‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: {agent['timeout_seconds']}s")
            print(f"üí≥ –ê–¥—Ä–µ—Å –æ–ø–ª–∞—Ç—ã: {agent['pay_to_address']}")
            print(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω: {agent['last_updated']}")
            print("-" * 80)
    
    def get_json_results(self, prompt: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        matching_agents = self.find_agents_by_prompt(prompt)
        
        result = {
            'query': prompt,
            'found_agents': len(matching_agents),
            'agents': matching_agents[:10]  # –¢–æ–ø-10
        }
        
        return json.dumps(result, ensure_ascii=False, indent=2)

def main():
    print("ü§ñ AI Agent Finder –¥–ª—è x402 Bazaar")
    print("=" * 50)
    
    finder = AIAgentFinder()
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞
    test_queries = [
        "–Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
        "—É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É",
        "—Ü–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏",
        "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ",
        "–≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ python",
        "–ø–æ–∏—Å–∫ –≤ github"
    ]
    
    for query in test_queries:
        print(f"\n{'='*60}")
        finder.search_and_display(query)
        print(f"{'='*60}")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print("\nüéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:")
    while True:
        try:
            user_prompt = input("\nüí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
            
            if user_prompt.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if user_prompt:
                finder.search_and_display(user_prompt)
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

if __name__ == "__main__":
    main()
