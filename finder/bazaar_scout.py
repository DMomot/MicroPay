import requests
import json
import time
from jwt_generator import generate_jwt

class BazaarScout:
    """–°–∫–∞–Ω–µ—Ä x402 Bazaar –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.base_url = "https://api.cdp.coinbase.com"
        self.discovery_endpoint = "/platform/v2/x402/discovery/resources"
        
    def get_all_agents(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ x402 Bazaar"""
        try:
            jwt_token = generate_jwt(self.discovery_endpoint)
            
            headers = {
                "Authorization": f"Bearer {jwt_token}",
                "Content-Type": "application/json"
            }
            
            response = requests.get(
                f"{self.base_url}{self.discovery_endpoint}",
                headers=headers
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"Response: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return None
    
    def analyze_agents(self, data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∞–≥–µ–Ω—Ç–∞—Ö"""
        if not data or 'items' not in data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        agents = data['items']
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
        print(f"üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data.get('pagination', {})}")
        print(f"üîó x402 –≤–µ—Ä—Å–∏—è: {data.get('x402Version', 'N/A')}\n")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤
        services = {}
        for agent in agents:
            resource = agent.get('resource', 'Unknown')
            domain = resource.split('/')[2] if '://' in resource else 'Unknown'
            
            if domain not in services:
                services[domain] = []
            services[domain].append(agent)
        
        # –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        for domain, domain_agents in services.items():
            print(f"üåê {domain} ({len(domain_agents)} —Å–µ—Ä–≤–∏—Å–æ–≤):")
            for agent in domain_agents:
                self.print_agent_info(agent)
            print()
    
    def print_agent_info(self, agent):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ"""
        resource = agent.get('resource', 'N/A')
        accepts = agent.get('accepts', [])
        last_updated = agent.get('lastUpdated', 'N/A')
        
        print(f"  üì° {resource}")
        
        if accepts:
            accept = accepts[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π accept
            max_amount = accept.get('maxAmountRequired', 'N/A')
            timeout = accept.get('maxTimeoutSeconds', 'N/A')
            network = accept.get('network', 'N/A')
            asset = accept.get('asset', 'N/A')
            description = accept.get('description', 'N/A')
            
            print(f"    üí∞ –¶–µ–Ω–∞: {max_amount} USDC")
            print(f"    ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: {timeout}s")
            print(f"    üåç –°–µ—Ç—å: {network}")
            if description:
                print(f"    üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        
        print(f"    üïê –û–±–Ω–æ–≤–ª–µ–Ω: {last_updated}")
    
    def find_ai_models(self, data):
        """–ò—â–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏ AI –º–æ–¥–µ–ª–∏ —Å—Ä–µ–¥–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        if not data or 'items' not in data:
            return []
            
        ai_keywords = ['ai', 'ml', 'model', 'gpt', 'llm', 'generation', 'analysis', 'prediction']
        ai_agents = []
        
        for agent in data['items']:
            resource = agent.get('resource', '').lower()
            description = agent.get('accepts', [{}])[0].get('description', '').lower()
            
            if any(keyword in resource or keyword in description for keyword in ai_keywords):
                ai_agents.append(agent)
        
        return ai_agents
    
    def save_results(self, data, filename="bazaar_agents.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        
        # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö URL
        blacklisted_urls = [
            "https://scoutpay-production.up.railway.app/api/prices",
            "scoutpay-production.up.railway.app"
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        if data and 'items' in data:
            original_count = len(data['items'])
            filtered_items = []
            
            for agent in data['items']:
                resource = agent.get('resource', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–≥–µ–Ω—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
                is_blacklisted = any(blacklisted_url in resource for blacklisted_url in blacklisted_urls)
                
                if not is_blacklisted:
                    filtered_items.append(agent)
                else:
                    print(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç: {resource}")
            
            data['items'] = filtered_items
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
            if 'pagination' in data:
                data['pagination']['total'] = len(filtered_items)
            
            blocked_count = original_count - len(filtered_items)
            if blocked_count > 0:
                print(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {blocked_count}")
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def main():
    print("üîç ScoutPay Bazaar Scout - –ø–æ–∏—Å–∫ AI –º–æ–¥–µ–ª–µ–π –≤ x402 Bazaar\n")
    
    scout = BazaarScout()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üì° –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤...")
    data = scout.get_all_agents()
    
    if data:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤...\n")
        scout.analyze_agents(data)
        
        # –ò—â–µ–º AI –º–æ–¥–µ–ª–∏
        ai_agents = scout.find_ai_models(data)
        if ai_agents:
            print(f"\nü§ñ –ù–∞–π–¥–µ–Ω–æ AI –º–æ–¥–µ–ª–µ–π: {len(ai_agents)}")
            for agent in ai_agents:
                scout.print_agent_info(agent)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        scout.save_results(data)
        
        print(f"\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Bazaar")

if __name__ == "__main__":
    main()
