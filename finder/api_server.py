from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Optional
from gemini_agent_finder import GeminiAgentFinder
import uvicorn

app = FastAPI(
    title="ScoutPay AI Agent Finder API",
    description="API –¥–ª—è –ø–æ–∏—Å–∫–∞ x402 –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–º–ø—Ç—É",
    version="1.0.0"
)

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini AI –∞–≥–µ–Ω—Ç–∞
try:
    import os
    refresh_interval = int(os.getenv('AGENTS_REFRESH_INTERVAL_MINUTES', '60'))
    finder = GeminiAgentFinder(min_rating=0.5, refresh_interval_minutes=refresh_interval)
except ValueError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ GEMINI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    finder = None

class SearchRequest(BaseModel):
    prompt: str
    max_results: Optional[int] = 10
    min_rating: Optional[float] = 0.5

class AgentInfo(BaseModel):
    resource: str
    description: str
    price_usdc: str
    network: str
    timeout_seconds: int
    asset_address: str
    pay_to_address: str
    last_updated: str
    rating: float  # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 1

class SearchResponse(BaseModel):
    query: str
    found_agents: int
    agents: List[AgentInfo]
    status: str

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "ScoutPay AI Agent Finder API",
        "version": "1.0.0",
        "endpoints": {
            "search": "/search",
            "health": "/health", 
            "agents": "/agents/all"
        }
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    if finder is None:
        raise HTTPException(status_code=500, detail="Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GEMINI_API_KEY")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
        agents = finder.load_agents()
        return {
            "status": "healthy",
            "agents_loaded": len(agents),
            "min_rating": finder.min_rating,
            "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")

@app.post("/search", response_model=SearchResponse)
async def search_agents(request: SearchRequest):
    """–ü–æ–∏—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–º–ø—Ç—É —Å Gemini"""
    if finder is None:
        raise HTTPException(status_code=500, detail="Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        if not request.prompt.strip():
            raise HTTPException(status_code=400, detail="–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        original_min_rating = finder.min_rating
        if request.min_rating is not None:
            finder.set_min_rating(request.min_rating)
        
        # –ü–æ–∏—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤ —Å Gemini
        matching_agents = finder.find_agents_by_prompt(request.prompt)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        finder.min_rating = original_min_rating
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        limited_agents = matching_agents[:request.max_results]
        
        return SearchResponse(
            query=request.prompt,
            found_agents=len(matching_agents),
            agents=[AgentInfo(**agent) for agent in limited_agents],
            status="success"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

@app.get("/agents/all")
async def get_all_agents():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    try:
        agents = finder.load_agents()
        
        formatted_agents = []
        for agent in agents:
            agent_info = finder._format_agent_info(agent, 0.0)
            formatted_agents.append(agent_info)
        
        return {
            "total_agents": len(formatted_agents),
            "agents": formatted_agents
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤: {str(e)}")

@app.get("/categories")
async def get_categories():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        agents = finder.load_agents()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–æ–º–µ–Ω–∞–º
        categories = {}
        for agent in agents:
            resource = agent.get('resource', '')
            if '://' in resource:
                domain = resource.split('/')[2]
                if domain not in categories:
                    categories[domain] = 0
                categories[domain] += 1
        
        return {
            "categories": categories,
            "total_domains": len(categories)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")

@app.get("/search/examples")
async def get_search_examples():
    """–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {
        "examples": [
            "–Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
            "—É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ", 
            "—Ü–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ Apple",
            "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π",
            "–≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ Python",
            "–ø–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub",
            "–ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ",
            "–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI",
            "—Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å"
        ]
    }

@app.post("/rating/stats")
async def get_rating_stats(request: SearchRequest):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    if finder is None:
        raise HTTPException(status_code=500, detail="Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        if not request.prompt.strip():
            raise HTTPException(status_code=400, detail="–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        stats = finder.get_rating_stats(request.prompt)
        return {
            "query": request.prompt,
            "stats": stats,
            "status": "success"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

@app.post("/rating/threshold")
async def update_rating_threshold(min_rating: float):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥"""
    if finder is None:
        raise HTTPException(status_code=500, detail="Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    if not (0.0 <= min_rating <= 1.0):
        raise HTTPException(status_code=400, detail="–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
    
    finder.set_min_rating(min_rating)
    return {
        "min_rating": finder.min_rating,
        "message": f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {finder.min_rating}"
    }



if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º ScoutPay AI Agent Finder API...")
    print("üì° API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    
    uvicorn.run(
        "api_server:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )
