"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è nonce –¥–ª—è EIP3009 —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ destination chain –∏ address
"""

import secrets
import struct

def create_cctp_nonce(destination_domain: int, destination_address: str) -> bytes:
    """
    –°–æ–∑–¥–∞–µ—Ç 32-–±–∞–π—Ç–æ–≤—ã–π nonce –¥–ª—è CCTP —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ nonce (32 –±–∞–π—Ç–∞):
    - 4 –±–∞–π—Ç–∞: destination domain (uint32)
    - 20 –±–∞–π—Ç: destination address (address)
    - 8 –±–∞–π—Ç: —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    Args:
        destination_domain: CCTP domain ID (0 = Ethereum, 1 = Avalanche, 2 = Optimism, 3 = Arbitrum, 6 = Base, 7 = Polygon)
        destination_address: –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ destination chain
    
    Returns:
        bytes: 32-–±–∞–π—Ç–æ–≤—ã–π nonce
    """
    
    # –£–±–∏—Ä–∞–µ–º 0x –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å
    if destination_address.startswith('0x'):
        destination_address = destination_address[2:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∞–¥—Ä–µ—Å–∞
    if len(destination_address) != 40:
        raise ValueError(f"Invalid address length: {len(destination_address)}, expected 40")
    
    # 4 –±–∞–π—Ç–∞ –¥–ª—è domain (big-endian uint32)
    domain_bytes = struct.pack('>I', destination_domain)
    
    # 20 –±–∞–π—Ç –¥–ª—è address
    address_bytes = bytes.fromhex(destination_address)
    
    # 8 –±–∞–π—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    random_bytes = secrets.token_bytes(8)
    
    # –°–æ–±–∏—Ä–∞–µ–º nonce
    nonce = domain_bytes + address_bytes + random_bytes
    
    return nonce

def parse_cctp_nonce(nonce: bytes) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç CCTP nonce –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    Args:
        nonce: 32-–±–∞–π—Ç–æ–≤—ã–π nonce
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ nonce
    """
    
    if len(nonce) != 32:
        raise ValueError(f"Invalid nonce length: {len(nonce)}, expected 32")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º domain (–ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞)
    domain = struct.unpack('>I', nonce[:4])[0]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º address (—Å–ª–µ–¥—É—é—â–∏–µ 20 –±–∞–π—Ç)
    address = '0x' + nonce[4:24].hex()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –±–∞–π—Ç)
    random_data = nonce[24:32].hex()
    
    return {
        'destination_domain': domain,
        'destination_address': address,
        'random_data': random_data
    }

def get_domain_name(domain_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –ø–æ domain ID"""
    domain_names = {
        0: "Ethereum",
        1: "Avalanche", 
        2: "Optimism",
        3: "Arbitrum",
        6: "Base",
        7: "Polygon"
    }
    return domain_names.get(domain_id, f"Unknown ({domain_id})")

if __name__ == "__main__":
    # –¢–µ—Å—Ç
    print("üß™ –¢–ï–°–¢ CCTP NONCE UTILS")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º nonce –¥–ª—è Ethereum
    destination_domain = 0  # Ethereum
    destination_address = "0x742d35Cc6634C0532925a3b8D5c9C5e3fBE5e1d4"
    
    nonce = create_cctp_nonce(destination_domain, destination_address)
    
    print(f"üìã –°–æ–∑–¥–∞–Ω nonce:")
    print(f"  Destination Domain: {destination_domain} ({get_domain_name(destination_domain)})")
    print(f"  Destination Address: {destination_address}")
    print(f"  Nonce (hex): 0x{nonce.hex()}")
    print(f"  Nonce length: {len(nonce)} bytes")
    
    # –ü–∞—Ä—Å–∏–º –æ–±—Ä–∞—Ç–Ω–æ
    parsed = parse_cctp_nonce(nonce)
    print(f"\nüîç –ü–∞—Ä—Å–∏–Ω–≥ nonce:")
    print(f"  Domain: {parsed['destination_domain']} ({get_domain_name(parsed['destination_domain'])})")
    print(f"  Address: {parsed['destination_address']}")
    print(f"  Random: {parsed['random_data']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    match = (parsed['destination_domain'] == destination_domain and 
             parsed['destination_address'].lower() == destination_address.lower())
    print(f"  ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {match}")
